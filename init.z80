INCLUDE "hardware.inc"

numOfTiles EQU 11 ; the number of tiles in Tiles.bin

SECTION "Tiles", ROM0
Tiles:
INCBIN "assets/Tiles.bin",0,numOfTiles*16
.end:

SECTION "Init", ROM0
Init_Object_Table
	ld a, 1
	ld [numOfObjects], a

	ld hl, Obj0.type
	ld [hl], 0		;0 for player
	inc l	;ld hl, Obj0.x
	ld [hl], 3 	;x is 8-pixels offset
	inc l	;ld hl, Obj0.y
	ld [hl], 3	;y is offset by 16
	inc l	;ld hl, Obj0.status
	ld [hl], OAMF_PAL0
	inc l
	ld [hl], LOW(shadow_oam) ;the player is the first object
	inc l
	ld [hl], HIGH(shadow_oam)
	ld hl, Obj0
	call UpdateOAM
	jp OAM_DMA
Init_OAM:
	ld hl, rLCDC
	ld [hl], LCDCF_ON|LCDCF_BG8000|LCDCF_OBJON|LCDCF_BGON
.init_Player
	ld hl, shadow_oam + 2	;OAM entry 0, byte 2 (tile)
	ld [hl], $23		;player tile
	inc l
	ld [hl], OAMF_PAL0	

	inc l
	ld b, $FF
	ld a, 160
.loop
	ld [hl], b
	inc l
	cp a, l
	jr nz, .loop
	ret

InitRoom:
;clean the room
	ld b,0
	ld hl,room
	ld d,HIGH(32*32+room)
.clear_loop
	ld [hl],b
	inc hl
	ld a, h
	cp d
	jr nz, .clear_loop

;putWalls
	ld a, $26		;	- tile
;top and bottom
	ld hl, room+(3+1)+3*SCRN_VX_B
	ld b, 6
.horiz_loop_1:
	ld [hl+], a
	dec b
	jr nz, .horiz_loop_1
	ld hl, room+(3+1)+(3+8)*SCRN_VX_B
	ld b, 6
.horiz_loop_2:
	ld [hl+], a
	dec b
	jr nz, .horiz_loop_2
;sides
	ld a, $2A	;	| tile
	ld de, SCRN_VX_B
	ld hl, room+3+(3+1)*SCRN_VX_B
REPT 6
	ld [hl], a
	add hl, de
ENDR
	ld hl, room+(3+8)+(3+1)*SCRN_VX_B
REPT 6
	ld [hl], a
	add hl, de
ENDR
;corners
	ld a, $29	;	+ tile
	ld [hl], a
	ld [room+ 3+    3   *SCRN_VX_B], a
	ld [room+(3+8)+ 3   *SCRN_VX_B], a
	ld [room+ 3   +(3+8)*SCRN_VX_B], a
	ret


Load_DMA_Loop:
	ld bc, (hOAM_DMA.end-hOAM_DMA)*$0100+LOW(hOAM_DMA.end)
		;ld b, (hOAM_DMA.end-hOAM_DMA)
		;ld c, LOW(hOAM_DMA.end)
	ld hl, DMA_Source.end
.loop
	ld a, [hl-]
	ld [c], a
	dec c
	dec b
	jr nz, .loop
	ld a, [hl]
	ld [c], a
	ret

Init:
	ld a, %11100100
	ldh [rOBP0], a
	ldh [rBGP], a
	;Enable VBlank interrupt
	ldh a, [LOW(rIE)]
	or a, IEF_VBLANK
	ldh [LOW(rIE)], a

.LoadTiles
	ld hl, _VRAM + $200
	ld d, numOfTiles * 2
	call Wait_VBlank
	ld sp, Tiles
	di
.LoadLoop
REPT 4
	pop bc
	ld a,c
	ld [hl+],a
	ld a,b
	ld [hl+],a
ENDR
	dec d
	jp nz, .LoadLoop

.ClearBGMap	
	ld e, d		;	ld de, $00
	ld sp, _SCRN0 + $10+ $09 * $20
	ld a, 5
.CleanLoop
REPT 5
	push de
ENDR
	dec a
	jp nz, .CleanLoop
	ld sp, $FFFC
	reti
