INCLUDE "hardware.inc"

SECTION "rst38",ROM0[$38]
REPT 8
	rst $38
ENDR
SECTION "Interrupt handlers",ROM0[$40]
REPT $100 - $40
	reti
ENDR

SECTION "Header", ROM0[$100]
EntryPoint:
	ei
	jp Start
REPT $150 - $104
	db 0
ENDR

SECTION "OAM DMA starter",ROM0
OAM_DMA:
	di
	push af
	call hOAM_DMA
	pop af
	reti

SECTION "Start", ROM0
Start:
	call Init_OAM
	call Load_DMA_Loop
	call InitRoom
	call Init
	call hOAM_DMA
	call CopyBGMap
	call Init_Object_Table
	call GetKeys

.GameLoop:
	call PlayerAI
	call OAM_DMA
	halt
	halt
	jr .GameLoop
	jp TerminateLoop

PlayerAI:	;overwrites all regs...
	call Wait_VBlank
	ld hl, Obj0.x
	ld a, [hl+]
	and a, %00011111
	ld h, [hl]
	ld l, a
	ld a, h
	and a, %00011111
	ld h, a
.wait_for_input:
	push hl
	call GetKeys	;a=keys
	pop hl

	cp a, $FF
	jr nz, .PressedSomething
	halt
	jr .wait_for_input
.PressedSomething:
	add a, a
	jr c, .DownNotPressed
	inc h
	jp .checkFreeSpace
.DownNotPressed
	add a, a
	jr c, .UpNotPressed
	dec h
	jp .checkFreeSpace
.UpNotPressed

	add a, a
	jr c, .LeftNotPressed
	dec l
	jp .checkFreeSpace
.LeftNotPressed
	add a, a
	jr c, .RightNotPressed
	inc l
	jp .checkFreeSpace
.RightNotPressed

	add a, a
	jr nc, .pressedStart
	add a, a
	jr nc, .pressedSelect
	add a, a
	jr nc, .pressedB
;	jr .pressedA		;uncomment together with PauseMenu
.pressedStart:
	;call PauseMenu
.pressedA:
.pressedB:
.pressedSelect:
.pressedNothing:
	halt
	jp .wait_for_input
.checkFreeSpace:
	ld b, h
	ld c, l	;h,l = b,c = y,x

	dec h
	dec h
	ld a, h
	and %00011111
	ld h, a
	dec l	;y offset = 16 = 2*8, x offset = 8 = 1*8
	ld a, l
	and %00011111
	ld l, a

	ld a, l
	ld l,h
	ld h,0
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add a, l
	ld l, a		;hl = 32y + x now
	ld a, HIGH(room)
	add a, h
	ld h, a

	ld a, [hl]
	and a, a
	jr z, .Move
	jr nz, .DontMove

.DontMove:
	;animate failure, failure feedback
	jp PlayerAI
.Move:
	ld hl, Obj0.x
	ld [hl], c
	inc l		;ld objx.y
	ld [hl], b
	ld l, LOW(Obj0)
UpdateOAM:	; ;arguments: hl=objx ; destroys af, bc, d; updates one object in (shadow)oam
	inc hl	;ld hl, Objx.x
	ld c, [hl]
	inc l	;ld hl, Objx.y
	ld a, [hl+]
			;ld hl, Objx.status
	ld b, [hl]
	inc l
	;ld hl, Objx.OAMptr
	ld d, [hl]
	inc l
	ld h, [hl]
	ld l, d	;ld hl, [Objx.OAMptr]

	add a, a
	add a, a
	add a, a
	ld [hl+], a	;load y
	;notes to self- should change that into an actual animation thing

	ld a, c
	add a, a
	add a, a
	add a, a
	ld [hl+], a	;load x
	inc l

	ld a, b
	add a, a
	add a, a
	add a, a
	ld [hl], a	;load status
	ret


GetKeys:	;returns the input keys in register a, inverted
;;overwrites hl, af
;	ld hl, rP1
;	ld [hl], $20	;bit 4 is low, select direction keys
;	push bc			;4
;	ld a, $0F		;2
;	and a, [hl]		;read direction keys
;	ld [hl], $10	;bit 5 is low, select button keys
;	swap a			;2
;	pop bc			;3
;	push af			;4
;	ld a, $0F
;	and a, [hl]
;	ld [hl], $30 	;as required by the manual
;	pop hl
;	add a, h

;overwrites bc,af
	ld c, LOW(rP1)
	ld a, $20	;bit 4 is low, select direction keys
	ld [c], a
rept 5
	ld a, [c]
endr
	and a, $0F
	swap a
	ld b, a
	ld a, $10	;bit 5 is low, select button keys
	ld [c], a
rept 6
	ld a, [c]
endr
	and a, $0F
	or a, b
	ld b, a
	ld a, $30
	ld [c], a
	ld a, b
	ret

CopyBGMap:	;copies "shadow map" into vram
.init:
	call Wait_VBlank
	ld hl, room
	ld bc, _SCRN0
	ld d, HIGH(32*32) + HIGH(_SCRN0)
.startLoop:
	ld e, -64
.loop1:
REPT 2
	ld a, [hl+]		;2
	ld [bc], a		;2
	inc c			;1
ENDR
	inc e			;1
	jr nz, .loop1	;3
	call Wait_VBlank
	ld c, l
.loop2
REPT 2
	ld a, [hl+]		;2
	ld [bc], a		;2
	inc c			;1
ENDR
	jr nz, .loop2	;3
	call Wait_VBlank
	ld c, l
	inc b			;1
	ld a, d			;1
	cp b			;1
	jr nz, .startLoop	;3

	ret

Wait_VBlank:
	;corrupts c and a, assumes the interrupt is enabled
	ld c, LOW(rLY)
.WaitLoop
	halt
	ld a, [c]
    cp SCRN_Y
    jr c, .WaitLoop
	ret

TerminateLoop	;halts the machine
	db $40
	halt
	jr TerminateLoop

SECTION "room",WRAM0,ALIGN[8]

room:	;a representation of the map in the memory
;each cell could be one of the tiles:
	ds SCRN_VX_B * SCRN_VY_B

SECTION "Shadow OAM",WRAM0,ALIGN[8]
shadow_oam:
	ds 160

SECTION "OAM loop, source",ROM0
DMA_Source:
	ld a, HIGH(shadow_oam)
	ldh  [rDMA], a
	ld  a, $28
.oam_loop_wait:
	dec a
	jr  nz, .oam_loop_wait
	ret
.end:

SECTION "Object info",WRAM0	;object table
I = 0
REPT 32
J EQUS STRCAT("Obj", STRSUB("{I}", 2, STRLEN("{I}") - 1))
J:	;	that should produce things like ObjA2
PURGE J
.type:		ds 1
.x:			ds 1
.y:			ds 1
.status:	ds 1 ;	attributes etc. for the OAM
.OAMptr:	ds 2 ;	points to shadow_oam
			ds 2 ;	padding
I = I + 1
ENDR
PURGE I
numOfObjects:	ds 1

SECTION "OAM loop, destinaton",HRAM
hOAM_DMA:
	ds DMA_Source.end - DMA_Source
.end:
