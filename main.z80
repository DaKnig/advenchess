INCLUDE "hardware.inc"

SECTION "rst38",ROM0[$38]
REPT 8
	rst $38
ENDR
SECTION "Interrupt handlers",ROM0[$40]
REPT $100 - $40
	reti
ENDR

SECTION "Header", ROM0[$100]
EntryPoint:
	ei
	jp Start
REPT $150 - $104
	db 0
ENDR

SECTION "OAM DMA starter",ROM0
OAM_DMA:
	di
	push af
	call hOAM_DMA
	pop af
	reti

SECTION "Start", ROM0
Start:
	call Init_OAM
	call Load_DMA_Loop
	call InitRoom
	call Init
	call hOAM_DMA
	call CopyBGMap

	call GetKeys

	jp TerminateLoop

GetKeys:	;returns the input keys in register a, inverted
;overwrites hl, f
	ld hl, rP1
	ld [hl], $20	;bit 4 is low, select direction keys
	push bc			;4
	ld a, $0F		;2
	and a, [hl]		;read direction keys
	ld [hl], $10	;bit 5 is low, select button keys
	swap a			;2
	pop bc			;3
	push af			;4
	ld a, $0F
	and a, [hl]
	ld [hl], $30 	;as required by the manual
	pop hl
	add a, h

	ret

CopyBGMap:	;copies "shadow map" into vram
.init:
	call Wait_VBlank
	ld hl, room
	ld bc, _SCRN0
	ld d, HIGH(32*32) + HIGH(_SCRN0)
.startLoop:
	ld e, -64
.loop1:
REPT 2
	ld a, [hl+]		;2
	ld [bc], a		;2
	inc c			;1
ENDR
	inc e			;1
	jr nz, .loop1	;3
	call Wait_VBlank
	ld c, l
.loop2
REPT 2
	ld a, [hl+]		;2
	ld [bc], a		;2
	inc c			;1
ENDR
	jr nz, .loop2	;3
	call Wait_VBlank
	ld c, l
	inc b			;1
	ld a, d			;1
	cp b			;1
	jr nz, .startLoop	;3

	ret

Wait_VBlank:
	;corrupts c and a, assumes the interrupt is enabled
	ld c, LOW(rLY)
.WaitLoop
	halt
	ld a, [c]
    cp SCRN_Y
    jr c, .WaitLoop
	ret

TerminateLoop	;halts the machine
	db $40
	halt
	jr TerminateLoop

SECTION "room",WRAM0,ALIGN[8]

room:	;a representation of the map in the memory
;each cell could be one of the tiles:
	ds SCRN_VX_B * SCRN_VY_B

SECTION "Shadow OAM",WRAM0,ALIGN[8]
shadow_oam:
	ds 160

SECTION "OAM loop, source",ROM0
DMA_Source:
	ld a, HIGH(shadow_oam)
	ldh  [rDMA], a
	ld  a, $28
.oam_loop_wait:
	dec a
	jr  nz, .oam_loop_wait
	ret
.end:

SECTION "Object info",WRAM0
I = 0
REPT 40
J EQUS STRCAT("Obj", STRSUB("{I}", 2, STRLEN("{I}") - 1))
J:	;	that should produce things like ObjA2
PURGE J
.type:		ds 1
.x:			ds 1
.y:			ds 1
.status:	ds 1
.OAMptr:	ds 2
I = I + 1
ENDR
PURGE I
numOfObjects:	ds 1

SECTION "OAM loop, destinaton",HRAM
hOAM_DMA:
	ds DMA_Source.end - DMA_Source
.end:
